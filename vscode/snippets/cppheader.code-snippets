{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ojheader": {
		"prefix": "cqh",
		"body": [
			"/*",
			" * @Author      :vimday",
			" * @Desc        :$1",
			" * @Url         :$2",
			" * @File Name   :$TM_FILENAME",
			" * @Created Time:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			" * @E-mail      :lwftx@outlook.com",
			" * @GitHub      :https://github.com/vimday",
			" */",
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"const double eps=1e-10;",
			"const double pi=3.1415926535897932384626433832795;",
			"const double eln=2.718281828459045235360287471352;",
			"typedef long long ll;",
			"#define IN freopen(\"in.txt\", \"r\", stdin)",
			"#define OUT freopen(\"out.txt\",\"w\", stdout)",
			"#define scan(x) scanf(\"%d\", &x)",
			"#define mp make_pair",
			"#define pb push_back",
			"#define sqr(x) (x) * (x)",
			"#define pr(x) printf(\"Case %d: \",x)",
			"#define prn(x) printf(\"Case %d:\\\\n\",x)",
			"#define prr(x) printf(\"Case #%d: \",x)",
			"#define prrn(x) printf(\"Case #%d:\\\\n\",x)",
			"#define lowbit(x) (x&(-x))",
			"#define fi first",
			"#define se second",
			"typedef unsigned long long ull;",
			"typedef pair<int,int> pii;",
			"typedef vector<int> vi;",
			"void debug(){",
			"    #ifdef LOCAL",
			"         freopen(\"E:\\\\\\\\Cpp\\\\\\\\in.txt\", \"r\", stdin);",
			"         freopen(\"E:\\\\\\\\Cpp\\\\\\\\out.txt\", \"w\", stdout);",
			"    #endif",
			"}",
			"void printIntAns(int caseNum, int ans) {",
			"printf(\"Case #%d: %d\\\\n\", caseNum, ans);",
			"}",
			"int solve() {",
			"$0",
			"return 0;",
			"}",
			"int main(int argc, char const *argv[]) {",
			"   int T;",
			" cin >> T;",
			"for (int i = 0; i < T;)",
			"printIntAns(++i, solve());",
			"return 0;",
			"}"
		],
		"description": "cppheader"
	},
	"cppheader": {
		"prefix": "cch",
		"body": [
			"/*",
			" * @Author      :vimday",
			" * @Desc        :$1",
			" * @Url         :$2",
			" * @File Name   :$TM_FILENAME",
			" * @Created Time:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			" * @E-mail      :lwftx@outlook.com",
			" * @GitHub      :https://github.com/vimday",
			" */",
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"void debug(){",
			"    #ifdef LOCAL",
			"         freopen(\"E:\\\\\\\\Cpp\\\\\\\\in.txt\", \"r\", stdin);",
			"         freopen(\"E:\\\\\\\\Cpp\\\\\\\\out.txt\", \"w\", stdout);",
			"    #endif",
			"}",
			"$0"
		],
		"description": "cppheader"
	},
	"javaheader": {
		"prefix": "aah",
		"body": [
			"/*",
			" * @Author      :vimday",
			" * @Desc        :$1",
			" * @Url         :$2",
			" * @File Name   :$TM_FILENAME",
			" * @Created Time:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			" * @E-mail      :lwftx@outlook.com",
			" * @GitHub      :https://github.com/vimday",
			" */",
			"$0"
		],
		"description": "javaheader"
	},
	"TreeNode": {
		"prefix": "lctree",
		"body": [
			"struct TreeNode {",
			"    int val;",
			"    TreeNode *left;",
			"    TreeNode *right;",
			"    TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
			"};",
			"$0"
		],
		"description": "LC TreeNode"
	},
	"ListNode": {
		"prefix": "lclistnode",
		"body": [
			"struct ListNode {",
			"    int val;",
			"    ListNode* next;",
			"    ListNode(int x) : val(x), next(NULL) {}",
			"};",
			"$0"
		],
		"description": "LC ListNode"
	},
	"BinPow": {
		"prefix": "binpow",
		"body": [
			"long long binpow(long long a, long long b) {",
			"    long long res = 1;",
			"    while (b > 0) {",
			"        if (b & 1) res = res * a;",
			"        a = a * a;",
			"        b >>= 1;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "快速幂"
	},
	"BinPow Mod": {
		"prefix": "binpowmod",
		"body": [
			"long long binpow(long long a, long long b,long long m) {",
			"    a%=m;",
			"    long long res = 1;",
			"    while (b > 0) {",
			"        if (b & 1) res = res * a%m;",
			"        a = a * a%m;",
			"        b >>= 1;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "模快速幂"
	},
	"prefix_func": {
		"prefix": "prefix_func",
		"body": [
			"vector<int> prefix_function(string s) {",
			"int n = (int)s.length();",
			"vector<int> pi(n);",
			"for (int i = 1; i < n; i++) {",
			"int j = pi[i - 1];",
			"while (j > 0 && s[i] != s[j]) j = pi[j - 1];",
			"if (s[i] == s[j]) j++;",
			" pi[i] = j;",
			"}",
			"return pi;",
			"}"
		],
	}
}